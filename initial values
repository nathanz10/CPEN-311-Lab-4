library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity ksa is
  port(
    CLOCK_50 : in  std_logic;  -- Clock pin
    KEY      : in  std_logic_vector(3 downto 0);  -- push button switches
    SW       : in  std_logic_vector(9 downto 0);  -- slider switches
    LEDR     : out std_logic_vector(9 downto 0);  -- red lights
    HEX0     : out std_logic_vector(6 downto 0);
    HEX1     : out std_logic_vector(6 downto 0);
    HEX2     : out std_logic_vector(6 downto 0);
    HEX3     : out std_logic_vector(6 downto 0);
    HEX4     : out std_logic_vector(6 downto 0);
    HEX5     : out std_logic_vector(6 downto 0)
  );
end ksa;

architecture rtl of ksa is

  -- Seven Segment Decoder Component
  component SevenSegmentDisplayDecoder
    port (
      ssOut : out std_logic_vector(6 downto 0);
      nIn   : in  std_logic_vector(3 downto 0)
    );
  end component;

  -- RAM Component
  component s_memory
    port (
      address : in  std_logic_vector(7 downto 0);
      clock   : in  std_logic;
      data    : in  std_logic_vector(7 downto 0);
      wren    : in  std_logic;
      q       : out std_logic_vector(7 downto 0)
    );
  end component;



  -- Clock/reset signals
  signal clk, reset_n : std_logic;

  -- RAM interface signals
  signal mem_addr     : std_logic_vector(7 downto 0);
  signal mem_data_in  : std_logic_vector(7 downto 0);
  signal mem_data_out : std_logic_vector(7 downto 0);
  signal mem_write_en : std_logic;
  signal i            : unsigned(7 downto 0) := (others => '0');

  -- 7-segment display nibbles


begin

  -- Clock and reset assignments
  clk     <= CLOCK_50;
  reset_n <= KEY(3);  -- active-high reset

  -- Instantiate the RAM
  s_array : s_memory
    port map (
      address => mem_addr,
      clock   => clk,
      data    => mem_data_in,
      wren    => mem_write_en,
      q       => mem_data_out
    );

  -- FSM to write s[i] = i over 256 clock cycles
  process(clk, reset_n)
  begin
    if reset_n = '0' then
      i <= (others => '0');
      mem_write_en <= '0';
    elsif rising_edge(clk) then
      if i <= 255 then
        mem_addr     <= std_logic_vector(i);
        mem_data_in  <= std_logic_vector(i);
        mem_write_en <= '1';
        i <= i + 1;
      else
        mem_write_en <= '0';  -- Stop writing
      end if;
    end if;
  end process;
  

  

end rtl;
